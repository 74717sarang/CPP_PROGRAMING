//1.Write a program to accept, display and print the sum of elements of each row and sum of elements of each column of a matrix.

#include <stdio.h>
#define MAX_SIZE 10

int main() {
    int matrix[MAX_SIZE][MAX_SIZE];
    int rows, cols;
    printf("Enter the number of rows: ");
    scanf("%d", &rows);
    printf("Enter the number of columns: ");
    scanf("%d", &cols);
    if (rows > MAX_SIZE || cols > MAX_SIZE) {
        printf("Matrix dimensions exceed maximum size.\n");
        return 1; // Exit with error code
    }
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
    printf("Matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
    printf("Sum of elements of each row:\n");
    for (int i = 0; i < rows; i++) {
        int rowSum = 0;
        for (int j = 0; j < cols; j++) {
            rowSum += matrix[i][j];
        }
        printf("Row %d: %d\n", i + 1, rowSum);
    }
    printf("Sum of elements of each column:\n");
    for (int j = 0; j < cols; j++) {
        int colSum = 0;
        for (int i = 0; i < rows; i++) {
            colSum += matrix[i][j];
        }
        printf("Column %d: %d\n", j + 1, colSum);
    }
    return 0;
}

//2.Write a program to accept a matrix A of size mXn and store its transpose in matrix B. Display matrix B. 

#include <stdio.h>

#define MAX_SIZE 10

int main() {
    int A[MAX_SIZE][MAX_SIZE], B[MAX_SIZE][MAX_SIZE];
    int m, n;
    printf("Enter the number of rows (m): ");
    scanf("%d", &m);
    printf("Enter the number of columns (n): ");
    scanf("%d", &n);
    printf("Enter the elements of matrix A:\n");
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &A[i][j]);
        }
    }
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            B[j][i] = A[i][j];
        }
    }
    printf("Transpose of matrix A (Matrix B):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            printf("%d\t", B[i][j]);
        }
        printf("\n");
    }
    return 0;
}

//3.Write a program to add and multiply two matrices. Perform necessary checks before adding and multiplying the matrices.

#include <stdio.h>

#define MAX_SIZE 10
void inputMatrix(int matrix[][MAX_SIZE], int rows, int cols) {
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
}
void displayMatrix(int matrix[][MAX_SIZE], int rows, int cols) {
    printf("Matrix:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d\t", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int A[MAX_SIZE][MAX_SIZE], B[MAX_SIZE][MAX_SIZE], C[MAX_SIZE][MAX_SIZE];
    int rowsA, colsA, rowsB, colsB;
    printf("Enter the number of rows of matrix A: ");
    scanf("%d", &rowsA);
    printf("Enter the number of columns of matrix A: ");
    scanf("%d", &colsA);
    printf("Enter the number of rows of matrix B: ");
    scanf("%d", &rowsB);
    printf("Enter the number of columns of matrix B: ");
    scanf("%d", &colsB);
    if (rowsA != rowsB || colsA != colsB) {
        printf("Matrices cannot be added or multiplied.\n");
        return 1; // Exit with error code
    }
    printf("Enter elements of matrix A:\n");
    inputMatrix(A, rowsA, colsA);
    printf("Enter elements of matrix B:\n");
    inputMatrix(B, rowsB, colsB);

    // Adding matrices A and B
    printf("Sum of matrices A and B:\n");
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsA; j++) {
            C[i][j] = A[i][j] + B[i][j];
            printf("%d\t", C[i][j]);
        }
        printf("\n");
    }
    printf("Product of matrices A and B:\n");
    for (int i = 0; i < rowsA; i++) {
        for (int j = 0; j < colsB; j++) {
            C[i][j] = 0;
            for (int k = 0; k < colsA; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
            printf("%d\t", C[i][j]);
        }
        printf("\n");
    }
    return 0;
}

//Write a program to perform the following operations on a square matrix. Write
//i) Check if the matrix is symmetric.
//ii) Display the trace of the matrix (sum of diagonal elements).
//iii) Check if the matrix is an upper triangular matrix.

#include <stdio.h>

#define MAX_SIZE 10

int main() {
    int matrix[MAX_SIZE][MAX_SIZE];
    int size;
    printf("Enter the size of the square matrix: ");
    scanf("%d", &size);

    // Accepting elements of the matrix from the user
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
    int symmetric = 1;
    for (int i = 0; i < size && symmetric; i++) {
        for (int j = 0; j < size; j++) {
            if (matrix[i][j] != matrix[j][i]) {
                symmetric = 0;
                break;
            }
        }
    }
    printf("The matrix is %s symmetric.\n", symmetric ? "" : "not");
    int trace = 0;
    for (int i = 0; i < size; i++) {
        trace += matrix[i][i];
    }
    printf("Trace of the matrix: %d\n", trace);
    int upperTriangular = 1;
    for (int i = 1; i < size && upperTriangular; i++) {
        for (int j = 0; j < i; j++) {
            if (matrix[i][j] != 0) {
                upperTriangular = 0;
                break;
            }
        }
    }
    printf("The matrix is %s upper triangular.\n", upperTriangular ? "" : "not");
    return 0;
}